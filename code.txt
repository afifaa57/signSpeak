import cv2
import numpy as np
import os
from tensorflow.keras.models import load_model
from collections import deque

# ✅ Load ASL Model
model_path = r"F:\Project\AI Model\asl_model.h5"  # Change this to your model path
if not os.path.exists(model_path):
    raise FileNotFoundError(f"Error: Model file not found at {model_path}")

model = load_model(model_path)
print("✅ Model Loaded Successfully!")

# ✅ Class Labels
classes = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
           'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
           'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'space', 'del', 'nothing']

# ✅ Prediction History & Stability Settings
prediction_history = deque(maxlen=20)  # Larger buffer for better stability
last_prediction = None
stable_counter = 0
stable_threshold = 15  # Number of repetitions needed
final_prediction = "..."

# ✅ Frame Preprocessing Function
def preprocess_frame(frame):
    img = cv2.resize(frame, (64, 64))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = cv2.GaussianBlur(img, (5, 5), 0)  # Optional blur
    img = img / 255.0
    img = np.expand_dims(img, axis=0)
    return img

# ✅ Stable Prediction Helper
def get_stable_prediction(history):
    if not history:
        return "..."
    return max(set(history), key=history.count)

# ✅ Start Webcam
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("❌ Error: Could not open webcam.")
    exit()

print("🎥 ASL Detector Running... Press 'Q' to exit.")

while True:
    ret, frame = cap.read()
    if not ret:
        print(⚠️ Warning: Failed to capture image.")
        break

    # ✅ Define ROI
    x1, y1, x2, y2 = 150, 100, 450, 400
    roi = frame[y1:y2, x1:x2]

    # ✅ Predict Gesture
    processed_roi = preprocess_frame(roi)
    prediction = model.predict(processed_roi, verbose=0)
    predicted_class = np.argmax(prediction)
    confidence = np.max(prediction)
    predicted_label = classes[predicted_class]

    # ✅ Update Prediction History (only if confident)
    if confidence > 0.7:
        prediction_history.append(predicted_label)

    stabilized_prediction = get_stable_prediction(prediction_history)

    # ✅ Lock the final prediction after repeated matches
    if stabilized_prediction == last_prediction:
        stable_counter += 1
    else:
        stable_counter = 0
        last_prediction = stabilized_prediction

    if stable_counter >= stable_threshold:
        final_prediction = stabilized_prediction

    # ✅ Draw ROI box and prediction text
    cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 0), 2)
    cv2.putText(frame, f"Prediction: {final_prediction}", (x1 + 10, y1 - 10),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # ✅ Display windows
    cv2.imshow("ASL Detector", frame)
    cv2.imshow("ROI", roi)

    # ✅ Exit on 'q' key
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# ✅ Cleanup
cap.release()
cv2.destroyAllWindows()
print("🛑 ASL Detector Stopped.")
